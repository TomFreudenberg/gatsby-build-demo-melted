{"version":3,"sources":["../../src/db/index.js"],"names":["_","require","report","redux","emitter","dbs","process","env","GATSBY_DB_NODES","push","saveInProgress","saveState","Promise","all","map","db","err","warn","message","saveStateDebounced","debounce","startAutosave","bootstrapFinished","gatsby_executing_command","on","module","exports"],"mappings":";;;;;;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAE,UAAF,CAArB;;MACQG,O,GAAYD,K,CAAZC,O,EAER;AACA;;AACA,MAAMC,GAAG,GAAG,CAACF,KAAD,CAAZ;;AACA,IAAIG,OAAO,CAACC,GAAR,CAAYC,eAAZ,KAAiC,MAArC,EAA4C;AAC1CH,EAAAA,GAAG,CAACI,IAAJ,CAASR,OAAO,CAAE,QAAF,CAAhB;AACD,C,CAED;;;AACA,IAAIS,cAAc,GAAG,KAArB;;SACeC,S;;;;;+CAAf,aAA2B;AACzB,QAAID,cAAJ,EAAoB;AACpBA,IAAAA,cAAc,GAAG,IAAjB;;AAEA,QAAI;AACF,YAAME,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,GAAJ,CAAQC,EAAE,IAAIA,EAAE,CAACJ,SAAH,EAAd,CAAZ,CAAN;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZd,MAAAA,MAAM,CAACe,IAAP,CAAa,2BAA2BD,GAAG,IAAIA,GAAG,CAACE,OAAZ,IAAwBF,GAAI,EAAnE;AACD;;AAEDN,IAAAA,cAAc,GAAG,KAAjB;AACD,G;;;;AACD,MAAMS,kBAAkB,GAAGnB,CAAC,CAACoB,QAAF,CAAWT,SAAX,EAAsB,IAAtB,CAA3B;AAEA;;;;;;;AAKA,SAASU,aAAT,GAAyB;AACvB;AACA,MAAIC,iBAAiB,GAAG,KAAxB;;AACA,MAAIhB,OAAO,CAACC,GAAR,CAAYgB,wBAAZ,KAA0C,SAA9C,EAAwD;AACtDnB,IAAAA,OAAO,CAACoB,EAAR,CAAY,oBAAZ,EAAiC,MAAM;AACrCF,MAAAA,iBAAiB,GAAG,IAApB;AACAX,MAAAA,SAAS;AACV,KAHD;AAIAP,IAAAA,OAAO,CAACoB,EAAR,CAAY,GAAZ,EAAgB,MAAM;AACpB,UAAIF,iBAAJ,EAAuB;AACrBH,QAAAA,kBAAkB;AACnB;AACF,KAJD;AAKD,GAbsB,CAevB;;;AACA,MAAIb,OAAO,CAACC,GAAR,CAAYgB,wBAAZ,KAA0C,OAA9C,EAAsD;AACpDnB,IAAAA,OAAO,CAACoB,EAAR,CAAY,oBAAZ,EAAiC,MAAM;AACrCb,MAAAA,SAAS;AACV,KAFD;AAGD;AACF;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA;AADe,CAAjB","sourcesContent":["const _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst redux = require(`../redux`)\nconst { emitter } = redux\n\n// Even if we are using loki, we still include redux in the list of\n// dbs since it still has pages, config, etc.\nconst dbs = [redux]\nif (process.env.GATSBY_DB_NODES === `loki`) {\n  dbs.push(require(`./loki`))\n}\n\n// calls `saveState()` on all DBs\nlet saveInProgress = false\nasync function saveState() {\n  if (saveInProgress) return\n  saveInProgress = true\n\n  try {\n    await Promise.all(dbs.map(db => db.saveState()))\n  } catch (err) {\n    report.warn(`Error persisting state: ${(err && err.message) || err}`)\n  }\n\n  saveInProgress = false\n}\nconst saveStateDebounced = _.debounce(saveState, 1000)\n\n/**\n * Sets up listeners so that once bootstrap has finished, all\n * databases save their state to disk. If we're in `develop` mode,\n * then any new event triggers a debounced save as well.\n */\nfunction startAutosave() {\n  // During development, once bootstrap is finished, persist state on changes.\n  let bootstrapFinished = false\n  if (process.env.gatsby_executing_command === `develop`) {\n    emitter.on(`BOOTSTRAP_FINISHED`, () => {\n      bootstrapFinished = true\n      saveState()\n    })\n    emitter.on(`*`, () => {\n      if (bootstrapFinished) {\n        saveStateDebounced()\n      }\n    })\n  }\n\n  // During builds, persist state once bootstrap has finished.\n  if (process.env.gatsby_executing_command === `build`) {\n    emitter.on(`BOOTSTRAP_FINISHED`, () => {\n      saveState()\n    })\n  }\n}\n\nmodule.exports = {\n  startAutosave,\n}\n"],"file":"index.js"}